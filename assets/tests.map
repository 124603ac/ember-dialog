{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","dummy/tests/app.jshint.lint-test.js","dummy/tests/components/main-viewport.jshint.lint-test.js","dummy/tests/components/presenter-animate-css.jshint.lint-test.js","dummy/tests/components/presenter-animated.jshint.lint-test.js","dummy/tests/controllers/application.jshint.lint-test.js","dummy/tests/controllers/cookbook/animation.jshint.lint-test.js","dummy/tests/controllers/cookbook/creating-notices.jshint.lint-test.js","dummy/tests/controllers/cookbook/showing-server-errors.jshint.lint-test.js","dummy/tests/controllers/getting-started.jshint.lint-test.js","dummy/tests/controllers/index.jshint.lint-test.js","dummy/tests/controllers/tutorial/creating-dialog-templates.jshint.lint-test.js","dummy/tests/controllers/tutorial/creating.jshint.lint-test.js","dummy/tests/controllers/tutorial/interrupt-closing.jshint.lint-test.js","dummy/tests/controllers/tutorial/presenter-and-manager.jshint.lint-test.js","dummy/tests/helpers/destroy-app.js","dummy/tests/helpers/destroy-app.jshint.lint-test.js","dummy/tests/helpers/ember-i18n/test-helpers.js","dummy/tests/helpers/module-for-acceptance.js","dummy/tests/helpers/module-for-acceptance.jshint.lint-test.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/resolver.jshint.lint-test.js","dummy/tests/helpers/start-app.js","dummy/tests/helpers/start-app.jshint.lint-test.js","dummy/tests/instance-initializers/locale.jshint.lint-test.js","dummy/tests/locales/en/translations.jshint.lint-test.js","dummy/tests/locales/ru/translations.jshint.lint-test.js","dummy/tests/resolver.jshint.lint-test.js","dummy/tests/router.jshint.lint-test.js","dummy/tests/routes/application.jshint.lint-test.js","dummy/tests/routes/cookbook/index.jshint.lint-test.js","dummy/tests/routes/getting-started.jshint.lint-test.js","dummy/tests/routes/tutorial.jshint.lint-test.js","dummy/tests/routes/tutorial/index.jshint.lint-test.js","dummy/tests/services/locale.jshint.lint-test.js","dummy/tests/test-helper.js","dummy/tests/test-helper.jshint.lint-test.js","dummy/tests/unit/configuration-test.js","dummy/tests/unit/configuration-test.jshint.lint-test.js","dummy/tests/unit/helpers/hash-test.js","dummy/tests/unit/helpers/hash-test.jshint.lint-test.js","dummy/tests/unit/mixins/context-test.js","dummy/tests/unit/mixins/context-test.jshint.lint-test.js","dummy/tests/unit/services/dialog-test.js","dummy/tests/unit/services/dialog-test.jshint.lint-test.js","dummy/tests/unit/utils/zindex-test.js","dummy/tests/unit/utils/zindex-test.jshint.lint-test.js","dummy/tests/utils/change-locale.jshint.lint-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('dummy/tests/app.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('dummy/tests/components/main-viewport.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | components/main-viewport.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/main-viewport.js should pass jshint.');\n  });\n});","define('dummy/tests/components/presenter-animate-css.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | components/presenter-animate-css.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/presenter-animate-css.js should pass jshint.');\n  });\n});","define('dummy/tests/components/presenter-animated.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | components/presenter-animated.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/presenter-animated.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/application.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/application.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/cookbook/animation.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/cookbook/animation.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/cookbook/animation.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/cookbook/creating-notices.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/cookbook/creating-notices.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/cookbook/creating-notices.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/cookbook/showing-server-errors.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/cookbook/showing-server-errors.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/cookbook/showing-server-errors.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/getting-started.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/getting-started.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/getting-started.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/index.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/index.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/tutorial/creating-dialog-templates.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/tutorial/creating-dialog-templates.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/tutorial/creating-dialog-templates.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/tutorial/creating.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/tutorial/creating.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/tutorial/creating.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/tutorial/interrupt-closing.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/tutorial/interrupt-closing.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/tutorial/interrupt-closing.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/tutorial/presenter-and-manager.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/tutorial/presenter-and-manager.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/tutorial/presenter-and-manager.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  function destroyApp(application) {\n    _ember.default.run(application, 'destroy');\n  }\n});","define('dummy/tests/helpers/destroy-app.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/ember-i18n/test-helpers', ['ember'], function (_ember) {\n  'use strict';\n\n  // example usage: find(`.header:contains(${t('welcome_message')})`)\n  _ember.default.Test.registerHelper('t', function (app, key, interpolations) {\n    var i18n = app.__container__.lookup('service:i18n');\n    return i18n.t(key, interpolations);\n  });\n\n  // example usage: expectTranslation('.header', 'welcome_message');\n  _ember.default.Test.registerHelper('expectTranslation', function (app, element, key, interpolations) {\n    var text = app.testHelpers.t(key, interpolations);\n\n    assertTranslation(element, key, text);\n  });\n\n  var assertTranslation = function () {\n    if (typeof QUnit !== 'undefined' && typeof QUnit.assert.ok === 'function') {\n      return function (element, key, text) {\n        QUnit.assert.ok(find(element + ':contains(' + text + ')').length, 'Found translation key ' + key + ' in ' + element);\n      };\n    } else if (typeof expect === 'function') {\n      return function (element, key, text) {\n        var found = !!find(element + ':contains(' + text + ')').length;\n        expect(found).to.equal(true);\n      };\n    } else {\n      return function () {\n        throw new Error(\"ember-i18n could not find a compatible test framework\");\n      };\n    }\n  }();\n});","define('dummy/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (exports, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        (0, _destroyApp.default)(this.application);\n\n        if (options.afterEach) {\n          options.afterEach.apply(this, arguments);\n        }\n      }\n    });\n  };\n});","define('dummy/tests/helpers/module-for-acceptance.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/resolver', ['exports', 'ember-resolver', 'dummy/config/environment'], function (exports, _emberResolver, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var resolver = _emberResolver.default.create();\n\n  resolver.namespace = {\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix\n  };\n\n  exports.default = resolver;\n});","define('dummy/tests/helpers/resolver.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/start-app', ['exports', 'ember', 'dummy/app', 'dummy/config/environment'], function (exports, _ember, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  function startApp(attrs) {\n    var application = void 0;\n\n    var attributes = _ember.default.merge({}, _environment.default.APP);\n    attributes = _ember.default.merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember.default.run(function () {\n      application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('dummy/tests/helpers/start-app.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('dummy/tests/instance-initializers/locale.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | instance-initializers/locale.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'instance-initializers/locale.js should pass jshint.');\n  });\n});","define('dummy/tests/locales/en/translations.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | locales/en/translations.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/en/translations.js should pass jshint.');\n  });\n});","define('dummy/tests/locales/ru/translations.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | locales/ru/translations.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/ru/translations.js should pass jshint.');\n  });\n});","define('dummy/tests/resolver.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('dummy/tests/router.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/application.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | routes/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/cookbook/index.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | routes/cookbook/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/cookbook/index.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/getting-started.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | routes/getting-started.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/getting-started.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/tutorial.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | routes/tutorial.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/tutorial.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/tutorial/index.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | routes/tutorial/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/tutorial/index.js should pass jshint.');\n  });\n});","define('dummy/tests/services/locale.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | services/locale.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/locale.js should pass jshint.');\n  });\n});","define('dummy/tests/test-helper', ['dummy/tests/helpers/resolver', 'ember-qunit'], function (_resolver, _emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.setResolver)(_resolver.default);\n});","define('dummy/tests/test-helper.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/configuration-test', ['ember', 'ember-dialog/configuration', 'qunit'], function (_ember, _configuration, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | configuration');\n\n  (0, _qunit.test)('it works', function (assert) {\n    _configuration.default.internal = \"some\";\n    _configuration.default.load({ foo: \"bar\" });\n    assert.equal(_ember.default.get(_configuration.default, \"foo\"), \"bar\");\n    assert.equal(_ember.default.get(_configuration.default, \"internal\"), \"some\");\n  });\n});","define('dummy/tests/unit/configuration-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | unit/configuration-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/configuration-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/helpers/hash-test', ['ember-dialog/helpers/hash', 'qunit'], function (_hash, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | hash');\n\n  (0, _qunit.test)('it works', function (assert) {\n    var hash = { foo: \"bar\" };\n    var result = _hash.default.compute(null, hash);\n    assert.equal(result.foo, \"bar\");\n  });\n});","define('dummy/tests/unit/helpers/hash-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | unit/helpers/hash-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/hash-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/context-test', ['ember', 'ember-dialog/mixins/context', 'qunit'], function (_ember, _context, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Mixin | context');\n\n  (0, _qunit.test)('it works', function (assert) {\n    var ContextObject = _ember.default.Object.extend(_context.default);\n    var subject = ContextObject.create({\n      acceptHandler: \"accept\",\n      declineHandler: \"decline\",\n      contextObject: {\n        actions: {\n          accept: function accept() {\n            assert.ok(true);\n          },\n          decline: function decline() {\n            assert.ok(true);\n          }\n        }\n      }\n    });\n    subject.actions.accept.apply(subject);\n    subject.actions.decline.apply(subject);\n  });\n\n  (0, _qunit.test)('makeArgsArray works', function (assert) {\n    assert.equal((0, _context.makeArgsArray)(arguments, {}).length, 2);\n  });\n\n  (0, _qunit.test)('execAction works with self function', function (assert) {\n    var context = {\n      acceptHandler: \"accept\",\n      accept: function accept() {\n        assert.ok(true);\n      },\n      contextObject: {}\n    };\n    _context.execAction.call(context, 'accept', arguments);\n  });\n\n  (0, _qunit.test)('execAction works with action function', function (assert) {\n    var context = {\n      acceptHandler: \"accept\",\n      contextObject: {\n        actions: {\n          accept: function accept() {\n            assert.ok(true);\n          }\n        }\n      }\n    };\n    _context.execAction.call(context, 'accept', arguments);\n  });\n});","define('dummy/tests/unit/mixins/context-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | unit/mixins/context-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/context-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/services/dialog-test', ['ember', 'ember-qunit'], function (_ember, _emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('service:dialog', 'Unit | Service | dialog', {\n    // Specify the other units that are required for this test.\n    needs: ['component:presenter'],\n    setup: function setup() {\n      this.service = this.subject();\n    },\n    teardown: function teardown() {\n      this.service.destroyAllPresenter();\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var _this = this;\n\n    _ember.default.run(function () {\n      _this.service.show(_ember.default.HTMLBars.template({\n        \"id\": \"PpaKcPyw\",\n        \"block\": \"{\\\"statements\\\":[[11,\\\"div\\\",[]],[15,\\\"class\\\",\\\"dialog-layout\\\"],[13],[0,\\\"layout\\\"],[14]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n        \"meta\": {}\n      }), _ember.default.HTMLBars.template({\n        \"id\": \"euNzviIx\",\n        \"block\": \"{\\\"statements\\\":[[0,\\\"template\\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal($(\".dialog-layout\").length, 1, \"Opened dialog\");\n    });\n  });\n\n  (0, _emberQunit.test)('it exists once', function (assert) {\n    var _this2 = this;\n\n    _ember.default.run(function () {\n      _this2.service.show(_ember.default.HTMLBars.template({\n        \"id\": \"PpaKcPyw\",\n        \"block\": \"{\\\"statements\\\":[[11,\\\"div\\\",[]],[15,\\\"class\\\",\\\"dialog-layout\\\"],[13],[0,\\\"layout\\\"],[14]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n        \"meta\": {}\n      }), _ember.default.HTMLBars.template({\n        \"id\": \"euNzviIx\",\n        \"block\": \"{\\\"statements\\\":[[0,\\\"template\\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n        \"meta\": {}\n      }), {}, { id: \"1\" });\n      _this2.service.show(_ember.default.HTMLBars.template({\n        \"id\": \"PpaKcPyw\",\n        \"block\": \"{\\\"statements\\\":[[11,\\\"div\\\",[]],[15,\\\"class\\\",\\\"dialog-layout\\\"],[13],[0,\\\"layout\\\"],[14]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n        \"meta\": {}\n      }), _ember.default.HTMLBars.template({\n        \"id\": \"euNzviIx\",\n        \"block\": \"{\\\"statements\\\":[[0,\\\"template\\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n        \"meta\": {}\n      }), {}, { id: \"1\" });\n      assert.equal($(\".dialog-layout\").length, 1, \"Dialog with id 1 opened once\");\n    });\n  });\n\n  (0, _emberQunit.test)('it exists twice without setting id', function (assert) {\n    var _this3 = this;\n\n    _ember.default.run(function () {\n      _this3.service.show(_ember.default.HTMLBars.template({\n        \"id\": \"PpaKcPyw\",\n        \"block\": \"{\\\"statements\\\":[[11,\\\"div\\\",[]],[15,\\\"class\\\",\\\"dialog-layout\\\"],[13],[0,\\\"layout\\\"],[14]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n        \"meta\": {}\n      }), _ember.default.HTMLBars.template({\n        \"id\": \"euNzviIx\",\n        \"block\": \"{\\\"statements\\\":[[0,\\\"template\\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n        \"meta\": {}\n      }));\n      _this3.service.show(_ember.default.HTMLBars.template({\n        \"id\": \"PpaKcPyw\",\n        \"block\": \"{\\\"statements\\\":[[11,\\\"div\\\",[]],[15,\\\"class\\\",\\\"dialog-layout\\\"],[13],[0,\\\"layout\\\"],[14]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n        \"meta\": {}\n      }), _ember.default.HTMLBars.template({\n        \"id\": \"euNzviIx\",\n        \"block\": \"{\\\"statements\\\":[[0,\\\"template\\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal($(\".dialog-layout\").length, 2, \"New Dialog with no id opened twice\");\n    });\n  });\n\n  (0, _emberQunit.test)('it exists twice with two different ids', function (assert) {\n    var _this4 = this;\n\n    _ember.default.run(function () {\n      _this4.service.show(_ember.default.HTMLBars.template({\n        \"id\": \"PpaKcPyw\",\n        \"block\": \"{\\\"statements\\\":[[11,\\\"div\\\",[]],[15,\\\"class\\\",\\\"dialog-layout\\\"],[13],[0,\\\"layout\\\"],[14]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n        \"meta\": {}\n      }), _ember.default.HTMLBars.template({\n        \"id\": \"euNzviIx\",\n        \"block\": \"{\\\"statements\\\":[[0,\\\"template\\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n        \"meta\": {}\n      }), {}, { id: \"2\" });\n      _this4.service.show(_ember.default.HTMLBars.template({\n        \"id\": \"PpaKcPyw\",\n        \"block\": \"{\\\"statements\\\":[[11,\\\"div\\\",[]],[15,\\\"class\\\",\\\"dialog-layout\\\"],[13],[0,\\\"layout\\\"],[14]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n        \"meta\": {}\n      }), _ember.default.HTMLBars.template({\n        \"id\": \"euNzviIx\",\n        \"block\": \"{\\\"statements\\\":[[0,\\\"template\\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n        \"meta\": {}\n      }), {}, { id: \"3\" });\n      assert.equal($(\".dialog-layout\").length, 2, \"New Dialog with different ids (1, 2) opened twice\");\n    });\n  });\n\n  (0, _emberQunit.test)('distory all opened dialogs', function (assert) {\n    var _this5 = this;\n\n    _ember.default.run(function () {\n      _this5.service.destroyAllPresenter();\n      assert.equal($(\".dialog-layout\").length, 0, \"All dialogs have been destroyed\");\n    });\n  });\n});","define('dummy/tests/unit/services/dialog-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | unit/services/dialog-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/dialog-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/utils/zindex-test', ['ember-dialog/utils/zindex', 'qunit'], function (_zindex, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Utility | zindex');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _zindex.max)();\n    assert.ok(result);\n  });\n});","define('dummy/tests/unit/utils/zindex-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | unit/utils/zindex-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/zindex-test.js should pass jshint.');\n  });\n});","define('dummy/tests/utils/change-locale.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | utils/change-locale.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/change-locale.js should pass jshint.');\n  });\n});","require('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpprHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;","file":"tests.js"}