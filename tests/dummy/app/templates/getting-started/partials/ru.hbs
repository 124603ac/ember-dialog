<h1 class="w-title __w-first">Знакомство</h1>

<div class="row">
  <div class="col-sm-12">
    <p>Ember Addon позволит вам легко создавать <b>кроссроутные</b> диалоговые окна и программно контролировать их закрытие. Аддон состоит из сервиса, через который они создаются и компонента - непосредственно самого диалогового окна (с нужным лейайтом и шаблоном).</p>
    <p>Сразу к делу, как они выглядят? Можете сами взлянуть: <a class="w-link w-link__pseudo" onclick={{action "showAlert"}}>alert</a>, <a class="w-link w-link__pseudo" onclick={{action "showConfirm"}}>confirm</a> и <a class="w-link w-link__pseudo" onclick={{action "showBlank"}}>blank</a> диалоовые окна.</p>
  </div>
</div>


<h2 class="w-subtitle">Установка</h2>

<div class="row">
  <div class="col-sm-12">
    <p>Установка либы такая же простая как:</p>
    <pre data-src="examples/getting-started/installation-1.bash"></pre>
    <p>Вы увидите что-то типа:</p>
    <pre data-src="examples/getting-started/installation-2.bash"></pre>
  </div>
</div>


<h2 class="w-subtitle">Концепция</h2>
<div class="row">
  <div class="col-sm-12">

    <p>Принцип работы очень прост. У менеджера диалоговых окон вызывается один из методов (`show`, `alert`, `confirm` или `blank`), он создает компонент с нужным layout и template. Далее рендерит его и прикрепляет к body. В это время также создается Promise, "Ручки" которого кладутся в компонент, он же и возвращается из метода, для того чтобы подпрограмма которая запросила его создания могла узнать с каким результатом диалоговое окно закрылось. Каждый компонент (рабочее название Presenter) имеет 2 метода: один для accept-закрытия, другое для decline-закрытия. Эти методы доустпны из шаблона и могут быть подвязаны к действиям пользователя, например при нажатии на какую-то кнопку внутри диалогового окна (в лейауте или шаблоне). Эти методы вызывают соответствующие методы самого Promise (который мы получили при создании модального окна, помните?), также компонент отстреливает соответствующее событие "accepted" или "declined". Менеджер диалоговых окон ловил эти события и по ним уничтожает компонент происходит его открепление от DOM - оно исчезает. Все просто, не так ли? :)</p>

    <p>Давайте представим, что вы хотите попросить пользователя подтвердить какое-то действие. Ему нужно показать модельное окно, для этого нужно вызвать метод `show` с нужным layout (нам нужно окно с 2 кнопкам: да и нет - лейаут `confirm` как раз создан для этого, давайте использовать его) и путь до шаблона, который мы хотим показать пользователю в модальном окне (сразу оговорюсь, что можно указать не путь до шаблона, а сам шаблон, почитать об этом вы можете здесь). Вызванный метод `show` создает и показывает пользователю модальное окно и возвращает нам Promise, который станет resolved или rejected при закрытии окна (зависит от того какую кнопку пользователь нажал: yes или no - тут все очевидно). Вот пример:</p>

    <pre data-src="examples/getting-started/example-1.javascript" data-line="7" class="line-numbers"></pre>

    <p>Метод `show` универсальный, благодаря ему вы можете создавать различные типы диалоговых окон, используя различные layouts: с разным количеством кнопок, разлиными способами вывода на экран и пр. Мы предусмотрели наиболее частые варианты модальных окон: alert, confirm и blank. Так, что каждый раз указывать один и тот же лейаут в разных местах программы не обязательно, смотри пример:</p>

    <pre data-src="examples/getting-started/example-2.javascript" class="line-numbers"></pre>

    <p>Куда дальше идти? Вы можете посетить страницу {{#link-to 'tutorial' class="w-link"}}{{t "navigation.tutorial"}}{{/link-to}}, {{#link-to 'cookbook' class="w-link"}}{{t "navigation.cookbook"}}{{/link-to}} или покопаться в <a href="docs" class="w-link">документации</a>. Если у вас еще остались вопросы, пожалуйста, пишите issue - попробует вместе решить ваш use case.</p>

    <p>Удачного пользования!</p>
  </div>
</div>
